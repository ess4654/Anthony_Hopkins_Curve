import ddf.minim.*;

Minim minim;
AudioPlayer player;

float DefaultScale = 1;
float FR = 27;
float SampleRate = 12;

boolean running = true;
boolean DEBUGGING = false;
boolean SoundOn = true;

float t = 0;
float scale = DefaultScale;
color transparent = color(0, 0, 0, 0);
color blue = color(148, 160, 208);
color skin = color(206, 170, 146);
color hair = color(179, 172, 164);
color brown = color(138, 102, 86);
color eyes = color(89, 124, 121);
color white = color(255, 255, 255);
ArrayList<PVector> points = new ArrayList<PVector>();
ArrayList<Integer> lineColor = new ArrayList<Integer>();
ArrayList<Integer> strokes = new ArrayList<Integer>();

void setup()
{
  fullScreen(P2D);
  //size(800, 800, P2D);
  background(0);
  noFill();
  smooth();
  frameRate(FR);
  
  minim = new Minim(this);
  player = minim.loadFile("Westworld Theme.mp3");
  if(SoundOn)
    player.loop();
}

void keyPressed() {
  if(key == ' ')
    running = !running;
  if(key == 'r')
    reset();
}

void reset()
{
  frameCount = -1;
  t = 0;
  lineColor.clear();
  strokes.clear();
  points.clear();
  minim.stop();
  minim = new Minim(this);
  if(SoundOn)
    player.loop();
  scale = DefaultScale;
}

float updateT(float T)
{
  T += 0.012;
  
  if(T >= 304.744) { //END
    strokes.add(1);
    lineColor.add(color(0, 0, 0));
    return 100 * PI;
  }
  if(T >= 301.594 && T < 304.744) { //SHIRT
    strokes.add(4);
    lineColor.add(blue);
    return T - 0.008;
  }
  if(T >= 292.109 && T < 301.594) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 301.594;
  }
  if(T >= 289.047 && T < 292.109) { //SHIRT NECK
    strokes.add(3);
    lineColor.add(blue);
    return T - 0.002;
  }
  if(T >= 279.525 && T < 289.047) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 289.047;
  }
  if(T >= 276.515 && T < 279.525) { //FACE
    strokes.add(3);
    lineColor.add(skin);
    return T;
  }
  if(T >= 267.144 && T < 276.515) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 276.515;
  }
  if(T >= 263.894 && T < 267.144) { //RIGHT FACE
    strokes.add(3);
    lineColor.add(skin);
    return T;
  }
  if(T >= 254.496 && T < 263.894) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 263.894;
  }
  if(T >= 251.338 && T < 254.496) { //RIGHT EAR
    strokes.add(2);
    lineColor.add(skin);
    return T - 0.008;
  }
  if(T >= 242.105 && T < 251.338) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 251.338;
  }
  if(T >= 238.771 && T < 242.105) { //LEFT FACE
    strokes.add(3);
    lineColor.add(skin);
    return T;
  }
  if(T >= 229.357 && T < 238.771) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 238.771;
  }
  if(T >= 226.203 && T < 229.357) { //LEFT EAR
    strokes.add(2);
    lineColor.add(skin);
    return T - 0.008;
  }
  if(T >= 216.809 && T < 226.203) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 226.203;
  }
  if(T >= 213.635 && T < 216.809) { //HAIR
    strokes.add(2);
    lineColor.add(hair);
    return T - 0.008;
  }
  if(T >= 204.294 && T < 213.635) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 213.635;
  }
  if(T >= 201.064 && T < 204.294) { //HAIR
    strokes.add(2);
    lineColor.add(hair);
    return T - 0.008;
  }
  if(T >= 191.672 && T < 201.064) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 201.064;
  }
  if(T >= 188.510 && T < 191.672) { //HAIR
    strokes.add(2);
    lineColor.add(hair);
    return T - 0.008;
  }
  if(T >= 179.124 && T < 188.510) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 188.510;
  }
  if(T >= 175.930 && T < 179.124) { //HAIR
    strokes.add(2);
    lineColor.add(hair);
    return T - 0.008;
  }
  if(T >= 166.660 && T < 175.930) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 175.930;
  }
  if(T >= 163.374 && T < 166.660) { //HAIR
    strokes.add(2);
    lineColor.add(hair);
    return T - 0.008;
  }
  if(T >= 154.020 && T < 163.374) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 163.374;
  }
  if(T >= 150.806 && T < 154.020) { //HAIR
    strokes.add(2);
    lineColor.add(hair);
    return T - 0.008;
  }
  if(T >= 141.452 && T < 150.806) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 150.806;
  }
  if(T >= 138.234 && T < 141.452) { //HAIR
    strokes.add(2);
    lineColor.add(hair);
    return T - 0.008;
  }
  if(T >= 128.847 && T < 138.234) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 138.234;
  }
  if(T >= 125.669 && T < 128.847) { //HAIR
    strokes.add(2);
    lineColor.add(hair);
    return T - 0.01;
  }
  if(T >= 116.441 && T < 125.669) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 125.669;
  }
  if(T >= 113.107 && T < 116.441) { //HAIR
    strokes.add(2);
    lineColor.add(hair);
    return T - 0.008;
  }
  if(T >= 103.767 && T < 113.107) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 113.107;
  }
  if(T >= 100.541 && T < 103.767) { //HAIR
    strokes.add(2);
    lineColor.add(hair);
    return T - 0.008;
  }
  if(T >= 91.216 && T < 100.541) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 100.541;
  }
  if(T >= 88.060 && T < 91.216) { //CHIN
    strokes.add(3);
    lineColor.add(skin);
    return T;
  }
  if(T >= 78.483 && T < 88.060) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 88.060;
  }
  if(T >= 75.399 && T < 78.483) { //LIPS
    strokes.add(2);
    lineColor.add(brown);
    return T - 0.004;
  }
  if(T >= 65.942 && T < 75.399) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 75.399;
  }
  if(T >= 62.858 && T < 65.942) { //RIGHT CHEEK
    strokes.add(2);
    lineColor.add(skin);
    return T;
  }
  if(T >= 53.545 && T < 62.858) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 62.858;
  }
  if(T >= 50.269 && T < 53.545) { //NOSE
    strokes.add(2);
    lineColor.add(skin);
    return T;
  }
  if(T >= 43.692 && T < 50.269) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 50.269;
  }
  if(T >= 37.704 && T < 43.692) { //RIGHT EYE
    strokes.add(2);
    if(T <= 39.504)
      lineColor.add(skin);
    else if(T <= 40.560)
      lineColor.add(eyes);
    else
      lineColor.add(skin);
      
    if(T >= 39.780 && T < 40.056)
      T = 40.056;
    return T;
  }
  if(T >= 31.476 && T < 37.704) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 37.704;
  }
  if(T >= 25.141 && T < 31.476) { //LEFT EYE
    strokes.add(2);
    if(T <= 26.604)
      lineColor.add(skin);
    else if(T <= 27.276)
      lineColor.add(eyes);
    else
      lineColor.add(skin);
    return T;
  }
  if(T >= 18.803 && T < 25.141) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 25.141;
  }
  if(T >= 12.492 && T < 18.803) { //RIGHT EYEBROW
    strokes.add(2);
    lineColor.add(skin);
    return T;
  }
  if(T >= 6.336 && T < 12.492) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 12.588;
  }
  else { //LEFT EYEBROW
    strokes.add(2);
    lineColor.add(skin);
  }
  
  return T;
}

void draw()
{ 
  if(frameCount < (FR/0.45)) return;
  if(t <= 100 * PI && running)
  {
    for(int z = 0; z<SampleRate; z++) {
      t = updateT(t);
      points.add(new PVector(x(t), -y(t)));
      if(DEBUGGING)
        print(t + "\n");
    }
  } else {
    if(!DEBUGGING)
      scale += 0.001333333;
  }
  
  translate(width/2 + 100, height/2 - 100);
  background(0);
  
  beginShape();
  for(int i = 0; i < points.size(); i++)
  {
    if(points.get(i).x == 0 && points.get(i).y == 0) continue;
    strokeWeight(strokes.get(i));
    stroke(lineColor.get(i));
    point(points.get(i).x * scale, points.get(i).y * scale);
  }
  endShape();
}

float sgn(float x)
{
  if(x == 0) return 0;
  else if(x > 0) return 1;
  else return -1;
}

float theta(float x)
{
  if(x == 0) return 0.5;
  else if(x > 0) return 1;
  else return 0;
}

float SIN(float x)
{
  return sin(x);
}

float x(float t)
{
  return ((-1.0/4*sin(17.0/11 - 30*t) - 5.0/3*sin(38.0/25 - 14*t) + 5601.0/20*sin(t + 33.0/7) + 195.0/4*sin(2*t + 11.0/7) + 653.0/6*sin(3*t + 11.0/7) + 49.0/6*sin(4*t + 8.0/5) + 274.0/7*sin(5*t + 11.0/7) + 60.0/7*sin(6*t + 61.0/13) + 31.0/21*sin(7*t + 5.0/3) + 41.0/15*sin(8*t + 33.0/7) + 50.0/11*sin(9*t + 8.0/5) + 23.0/14*sin(10*t + 23.0/15) + 124.0/15*sin(11*t + 11.0/7) + 19.0/11*sin(12*t + 61.0/13) + 7.0/3*sin(13*t + 19.0/12) + 7.0/4*sin(15*t + 47.0/10) + 9.0/5*sin(16*t + 3.0/2) + 1.0/2*sin(17*t + 32.0/7) + 16.0/9*sin(18*t + 17.0/11) + 5.0/7*sin(19*t + 11.0/7) + 4.0/5*sin(20*t + 23.0/5) + 3.0/7*sin(21*t + 19.0/13) + 4.0/7*sin(22*t + 47.0/10) + 1.0/6*sin(23*t + 23.0/15) + 8.0/9*sin(24*t + 13.0/8) + 1.0/4*sin(25*t + 3.0/2) + 2.0/9*sin(26*t + 26.0/15) + 2.0/5*sin(27*t + 10.0/7) + 9.0/10*sin(28*t + 37.0/8) + 6.0/13*sin(29*t + 13.0/9) + 1.0/79*sin(31*t + 25.0/11) + 7.0/9*sin(32*t + 20.0/13) + 6.0/11*sin(33*t + 14.0/3) + 1.0/2*sin(34*t + 13.0/9) + 1.0/5*sin(35*t + 51.0/11) + 1.0/14*sin(36*t + 51.0/11) - 2133.0/26)*theta(99*PI -t)*theta(t - 95*PI) + (-1.0/63*sin(25.0/17 - 36*t) - 1.0/17*sin(3.0/2 - 34*t) - 1.0/8*sin(11.0/7 - 31*t) - 1.0/6*sin(11.0/7 - 25*t) - 1.0/31*sin(17.0/11 - 24*t) - 1.0/4*sin(14.0/9 - 19*t) - 4.0/9*sin(14.0/9 - 9*t) - 1.0/60*sin(13.0/11 - 8*t) - 1.0/3*sin(11.0/7 - 7*t) - 13.0/8*sin(14.0/9 - 5*t) - 211.0/35*sin(14.0/9 - 2*t) + 710.0/7*sin(t + 11.0/7) + 18.0/7*sin(3*t + 33.0/7) + 37.0/8*sin(4*t + 11.0/7) + 2.0/7*sin(6*t + 19.0/12) + 1.0/6*sin(10*t + 8.0/5) + 7.0/13*sin(11*t + 11.0/7) + 1.0/6*sin(12*t + 11.0/7) + 1.0/9*sin(13*t + 14.0/3) + 7.0/13*sin(14*t + 47.0/10) + 2.0/9*sin(15*t + 47.0/10) + 1.0/10*sin(16*t + 3.0/2) + 2.0/11*sin(17*t + 17.0/11) + 1.0/95*sin(18*t + 9.0/7) + 1.0/3*sin(20*t + 47.0/10) + 1.0/5*sin(21*t + 47.0/10) + 1.0/5*sin(22*t + 11.0/7) + 1.0/5*sin(23*t + 11.0/7) + 1.0/88*sin(26*t + 68.0/15) + 1.0/8*sin(27*t + 17.0/11) + 1.0/43*sin(28*t + 9.0/7) + 1.0/9*sin(29*t + 47.0/10) + 1.0/6*sin(30*t + 33.0/7) + 1.0/11*sin(33*t + 14.0/9) + 1.0/9*sin(35*t + 47.0/10) + 1.0/33*sin(37*t + 7.0/5) + 1.0/10*sin(38*t + 8.0/5) - 584.0/13)*theta(95*PI -t)*theta(t - 91*PI) + (-35.0/8*sin(11.0/7 - 3*t) - 515.0/11*sin(11.0/7 -t) + 82.0/11*sin(2*t + 11.0/7) + 13.0/14*sin(4*t + 19.0/12) - 986.0/15)*theta(91*PI -t)*theta(t - 87*PI) + (-1.0/20*sin(13.0/9 - 32*t) - 1.0/12*sin(14.0/9 - 31*t) - 1.0/17*sin(17.0/11 - 28*t) - 1.0/15*sin(11.0/8 - 27*t) - 2.0/13*sin(3.0/2 - 24*t) - 1.0/10*sin(20.0/13 - 23*t) - 1.0/8*sin(14.0/9 - 21*t) - 1.0/5*sin(17.0/11 - 20*t) - 4.0/9*sin(20.0/13 - 16*t) - 2.0/9*sin(11.0/7 - 15*t) - 1.0/2*sin(17.0/11 - 12*t) - 31.0/13*sin(11.0/7 - 5*t) - 351.0/50*sin(11.0/7 - 4*t) - 38.0/5*sin(11.0/7 -t) + 171.0/5*sin(2*t + 11.0/7) + 25.0/13*sin(3*t + 47.0/10) + 47.0/12*sin(6*t + 11.0/7) + 1.0/18*sin(7*t + 5.0/3) + 5.0/7*sin(8*t + 33.0/7) + 1.0/22*sin(9*t + 5.0/3) + 14.0/11*sin(10*t + 11.0/7) + 1.0/20*sin(11*t + 22.0/13) + 1.0/7*sin(13*t + 79.0/17) + 5.0/7*sin(14*t + 19.0/12) + 1.0/19*sin(17*t + 3.0/2) + 11.0/21*sin(18*t + 8.0/5) + 1.0/20*sin(19*t + 17.0/10) + 1.0/4*sin(22*t + 19.0/12) + 1.0/10*sin(25*t + 33.0/7) + 1.0/11*sin(26*t + 11.0/7) + 1.0/30*sin(29*t + 41.0/9) + 1.0/17*sin(30*t + 19.0/12) + 518.0/9)*theta(87*PI -t)*theta(t - 83*PI) + (-1.0/16*sin(17.0/11 - 29*t) - 1.0/9*sin(4.0/7 - 10*t) - 109.0/11*sin(11.0/7 -t) + 91.0/8*sin(2*t + 11.0/7) + 14.0/3*sin(3*t + 14.0/9) + 28.0/19*sin(4*t + 20.0/13) + 157.0/39*sin(5*t + 11.0/7) + 1.0/4*sin(6*t + 33.0/7) + 18.0/13*sin(7*t + 14.0/3) + 3.0/10*sin(8*t + 23.0/5) + 25.0/11*sin(9*t + 14.0/9) + 32.0/13*sin(11*t + 11.0/7) + 43.0/21*sin(12*t + 33.0/7) + 2.0/7*sin(13*t + 16.0/9) + 3.0/7*sin(14*t + 51.0/11) + 7.0/11*sin(15*t + 51.0/11) + 8.0/9*sin(16*t + 14.0/3) + 33.0/34*sin(17*t + 17.0/11) + 1.0/6*sin(18*t + 13.0/12) + 5.0/12*sin(19*t + 19.0/12) + 4.0/11*sin(20*t + 47.0/10) + 3.0/10*sin(21*t + 20.0/13) + 3.0/10*sin(22*t + 23.0/5) + 2.0/9*sin(23*t + 32.0/7) + 1.0/9*sin(24*t + 8.0/7) + 3.0/5*sin(25*t + 29.0/19) + 1.0/2*sin(26*t + 47.0/10) + 1.0/9*sin(27*t + 12.0/7) + 2.0/13*sin(28*t + 3.0/2) + 1.0/41*sin(30*t + 17.0/4) + 1.0/4*sin(31*t + 19.0/13) + 1.0/7*sin(32*t + 9.0/7) + 2.0/11*sin(33*t + 19.0/12) + 2.0/9*sin(34*t + 60.0/13) + 1.0/18*sin(35*t + 32.0/7) + 1.0/6*sin(36*t + 13.0/8) + 1.0/6*sin(37*t + 47.0/10) + 1.0/38*sin(38*t + 3) + 1.0/13*sin(39*t + 15.0/11) + 1.0/12*sin(40*t + 5.0/4) + 1102.0/9)*theta(83*PI -t)*theta(t - 79*PI) + (124.0/3*sin(t + 11.0/7) + 123.0/13*sin(2*t + 11.0/7) + 36.0/7*sin(3*t + 11.0/7) + 24.0/7*sin(4*t + 11.0/7) + 2*sin(5*t + 11.0/7) + 10.0/9*sin(6*t + 11.0/7) + 7.0/8*sin(7*t + 11.0/7) + 3.0/5*sin(8*t + 8.0/5) + 5.0/11*sin(9*t + 8.0/5) + 6.0/13*sin(10*t + 8.0/5) + 3.0/11*sin(11*t + 8.0/5) + 4.0/13*sin(12*t + 8.0/5) + 3.0/13*sin(13*t + 11.0/7) + 1.0/9*sin(14*t + 14.0/9) + 3.0/11*sin(15*t + 8.0/5) + 1.0/19*sin(16*t + 19.0/12) + 1.0/6*sin(17*t + 8.0/5) + 1.0/9*sin(18*t + 21.0/13) + 1.0/23*sin(19*t + 11.0/7) + 1.0/11*sin(20*t + 11.0/7) + 1.0/13*sin(21*t + 26.0/17) + 1.0/8*sin(22*t + 11.0/7) + 1.0/13*sin(23*t + 11.0/7) + 1.0/31*sin(24*t + 14.0/9) + 1.0/12*sin(25*t + 8.0/5) - 1333.0/11)*theta(79*PI -t)*theta(t - 75*PI) + (-1.0/22*sin(7.0/8 - 54*t) - 1.0/11*sin(6.0/5 - 51*t) - 1.0/9*sin(8.0/7 - 50*t) - 2.0/11*sin(11.0/9 - 49*t) - 1.0/56*sin(5.0/14 - 48*t) - 1.0/10*sin(6.0/5 - 43*t) - 1.0/7*sin(8.0/7 - 42*t) - 2.0/13*sin(16.0/13 - 39*t) - 1.0/4*sin(11.0/8 - 37*t) - 3.0/11*sin(11.0/10 - 36*t) - 1.0/5*sin(3.0/2 - 29*t) - 2.0/5*sin(10.0/7 - 24*t) - 1.0/7*sin(7.0/6 - 23*t) - 7.0/11*sin(22.0/15 - 21*t) - 3.0/11*sin(14.0/9 - 16*t) - 30.0/7*sin(32.0/21 - 9*t) - 114.0/13*sin(17.0/11 - 5*t) - 17.0/8*sin(14.0/9 - 2*t) + 13.0/10*sin(t + 11.0/7) + 7*sin(3*t + 8.0/5) + 40.0/7*sin(4*t + 19.0/12) + 125.0/42*sin(6*t + 11.0/7) + 11.0/6*sin(7*t + 47.0/10) + 1.0/5*sin(8*t + 21.0/20) + 3.0/11*sin(10*t + 23.0/17) + 1.0/7*sin(11*t + 45.0/11) + 85.0/28*sin(12*t + 13.0/8) + 3.0/8*sin(13*t + 68.0/15) + 36.0/13*sin(14*t + 5.0/3) + 23.0/9*sin(15*t + 17.0/10) + 4.0/11*sin(17*t + 17.0/11) + 4.0/9*sin(18*t + 9.0/5) + 3.0/4*sin(19*t + 19.0/11) + 1.0/6*sin(20*t + 10.0/7) + 3.0/8*sin(22*t + 18.0/11) + 5.0/16*sin(25*t + 5.0/3) + 1.0/47*sin(26*t + 13.0/8) + 12.0/23*sin(27*t + 9.0/5) + 4.0/5*sin(28*t + 7.0/4) + 1.0/10*sin(30*t + 9.0/7) + 3.0/5*sin(31*t + 13.0/7) + 3.0/8*sin(32*t + 11.0/6) + 7.0/15*sin(34*t + 20.0/11) + 1.0/18*sin(35*t + 22.0/9) + 3.0/11*sin(38*t + 20.0/11) + 1.0/16*sin(40*t + 11.0/6) + 1.0/3*sin(41*t + 19.0/10) + 2.0/13*sin(44*t + 15.0/8) + 1.0/17*sin(45*t + 13.0/6) + 2.0/9*sin(46*t + 13.0/7) + 1.0/12*sin(47*t + 20.0/9) + 1.0/50*sin(52*t + 73.0/36) + 1.0/46*sin(53*t + 8.0/3) - 695.0/4)*theta(75*PI -t)*theta(t - 71*PI) + (-1.0/11*sin(5.0/6 - 48*t) - 1.0/9*sin(5.0/6 - 47*t) - 2.0/5*sin(11.0/9 - 46*t) - 3.0/7*sin(9.0/8 - 45*t) - 2.0/11*sin(10.0/9 - 44*t) - 1.0/15*sin(20.0/21 - 43*t) - 1.0/13*sin(7.0/10 - 42*t) - 9.0/19*sin(14.0/11 - 41*t) - 1.0/5*sin(13.0/10 - 40*t) - 1.0/27*sin(5.0/6 - 37*t) - 4.0/11*sin(19.0/13 - 36*t) - 2.0/5*sin(11.0/8 - 33*t) - 3.0/10*sin(35.0/23 - 32*t) - 1.0/3*sin(13.0/9 - 28*t) - 3.0/8*sin(13.0/10 - 27*t) - 1.0/6*sin(17.0/12 - 26*t) - 7.0/6*sin(18.0/13 - 24*t) - 16.0/13*sin(11.0/8 - 23*t) - 1.0/4*sin(11.0/8 - 22*t) -sin(25.0/17 - 20*t) - 7.0/12*sin(9.0/7 - 19*t) - 7.0/5*sin(17.0/11 - 18*t) - 56.0/13*sin(29.0/19 - 16*t) - 1.0/8*sin(11.0/7 - 10*t) - 1.0/7*sin(10.0/7 - 7*t) - 13.0/11*sin(11.0/7 -t) + 19.0/6*sin(2*t + 19.0/12) + 30.0/29*sin(3*t + 8.0/5) + 19.0/12*sin(4*t + 8.0/5) + 1.0/4*sin(5*t + 18.0/11) + 1.0/10*sin(6*t + 12.0/7) + 2.0/9*sin(8*t + 28.0/17) + 1.0/10*sin(9*t + 47.0/10) + 3.0/7*sin(11*t + 13.0/8) + 1.0/7*sin(12*t + 37.0/8) + 1.0/9*sin(13*t + 19.0/10) + 6.0/5*sin(14*t + 27.0/16) + 9.0/10*sin(15*t + 29.0/19) + 41.0/12*sin(17*t + 8.0/5) + 3.0/4*sin(21*t + 8.0/5) + 1.0/11*sin(25*t + 1.0/7) + 1.0/2*sin(29*t + 13.0/8) + 12.0/25*sin(30*t + 61.0/13) + 4.0/5*sin(31*t + 5.0/3) + 3.0/7*sin(34*t + 20.0/11) + 12.0/23*sin(35*t + 16.0/9) + 2.0/11*sin(38*t + 31.0/16) + 3.0/8*sin(39*t + 9.0/5) + 2317.0/19)*theta(71*PI -t)*theta(t - 67*PI) + (-11.0/9*sin(11.0/7 - 30*t) - 10.0/7*sin(17.0/11 - 28*t) - 15.0/13*sin(14.0/9 - 26*t) - 39.0/19*sin(11.0/7 - 24*t) - 19.0/8*sin(11.0/7 - 22*t) - 59.0/13*sin(11.0/7 - 19*t) - 23.0/7*sin(20.0/13 - 17*t) - 111.0/16*sin(14.0/9 - 16*t) - 37.0/16*sin(20.0/13 - 15*t) - 1.0/5*sin(17.0/11 - 9*t) - 1.0/3*sin(34.0/23 - 5*t) - 21.0/5*sin(11.0/7 - 2*t) + 103.0/9*sin(t + 11.0/7) + 20.0/11*sin(3*t + 11.0/7) + 8.0/15*sin(4*t + 21.0/13) + 8.0/7*sin(6*t + 11.0/7) + 15.0/13*sin(7*t + 33.0/7) + 7.0/11*sin(8*t + 14.0/9) + 5.0/8*sin(10*t + 35.0/23) + 3.0/7*sin(11*t + 8.0/5) + 13.0/10*sin(12*t + 47.0/10) + 18.0/7*sin(13*t + 19.0/12) + 7.0/11*sin(14*t + 32.0/21) + 20.0/7*sin(18*t + 14.0/9) + 19.0/12*sin(20*t + 19.0/12) + 3.0/7*sin(21*t + 19.0/13) + 31.0/13*sin(23*t + 11.0/7) + 14.0/9*sin(25*t + 8.0/5) + 11.0/8*sin(27*t + 19.0/12) + 4.0/7*sin(29*t + 14.0/9) + 11.0/9*sin(31*t + 11.0/7) + 1.0/6*sin(32*t + 31.0/16) + 903.0/8)*theta(67*PI -t)*theta(t - 63*PI) + (-1.0/8*sin(4.0/3 - 36*t) - 2.0/11*sin(9.0/7 - 33*t) - 2.0/3*sin(26.0/17 - 28*t) - 3.0/5*sin(14.0/9 - 24*t) - 8.0/5*sin(14.0/9 - 22*t) - 94.0/19*sin(11.0/7 - 19*t) - 1.0/3*sin(47.0/48 - 12*t) - 10.0/9*sin(28.0/19 - 10*t) - 36.0/13*sin(11.0/7 - 2*t) + 34.0/3*sin(t + 11.0/7) + 46.0/15*sin(3*t + 11.0/7) + 17.0/13*sin(4*t + 17.0/11) + 11.0/16*sin(5*t + 13.0/9) + 5.0/4*sin(6*t + 19.0/12) + 11.0/4*sin(7*t + 47.0/10) + 23.0/11*sin(8*t + 79.0/17) + 4.0/11*sin(9*t + 55.0/12) + 193.0/32*sin(11*t + 14.0/9) + 19.0/4*sin(13*t + 19.0/12) + 68.0/13*sin(14*t + 61.0/13) + 133.0/22*sin(15*t + 14.0/3) + 23.0/5*sin(16*t + 14.0/3) +sin(17*t + 5.0/3) + 1.0/6*sin(18*t + 18.0/7) + 2.0/11*sin(20*t + 31.0/12) + 9.0/14*sin(21*t + 13.0/8) + 34.0/33*sin(23*t + 5.0/3) + 4.0/15*sin(25*t + 11.0/8) + 6.0/11*sin(26*t + 8.0/5) + 4.0/15*sin(27*t + 23.0/15) + 5.0/6*sin(29*t + 18.0/11) + 8.0/9*sin(30*t + 47.0/10) + 3.0/7*sin(31*t + 37.0/8) + 2.0/7*sin(32*t + 16.0/9) + 1.0/10*sin(34*t + 5.0/4) + 8.0/11*sin(35*t + 29.0/19) + 1015.0/13)*theta(63*PI -t)*theta(t - 59*PI) + (-7.0/11*sin(31.0/21 - 52*t) - 10.0/13*sin(13.0/9 - 50*t) - 5.0/8*sin(10.0/7 - 45*t) - 2.0/5*sin(20.0/13 - 43*t) - 4.0/5*sin(19.0/13 - 41*t) - 1.0/21*sin(9.0/7 - 40*t) - 1.0/7*sin(5.0/4 - 39*t) - 5.0/8*sin(3.0/2 - 36*t) - 6.0/7*sin(26.0/17 - 34*t) - 3.0/10*sin(11.0/8 - 33*t) - 6.0/5*sin(22.0/15 - 30*t) - 22.0/9*sin(13.0/9 - 29*t) - 17.0/7*sin(3.0/2 - 28*t) - 6.0/5*sin(17.0/11 - 24*t) - 4.0/9*sin(14.0/9 - 23*t) - 23.0/15*sin(22.0/15 - 21*t) - 19.0/6*sin(20.0/13 - 18*t) - 13.0/5*sin(14.0/9 - 16*t) - 89.0/8*sin(35.0/23 - 15*t) - 73.0/8*sin(26.0/17 - 14*t) - 30.0/11*sin(17.0/11 - 13*t) - 11.0/4*sin(23.0/15 - 12*t) - 8.0/5*sin(14.0/9 - 8*t) - 7.0/13*sin(3.0/2 - 6*t) - 9.0/10*sin(32.0/21 - 3*t) - 4.0/5*sin(14.0/9 - 2*t) + 179.0/13*sin(t + 11.0/7) + 1.0/12*sin(4*t + 19.0/10) + 16.0/15*sin(5*t + 11.0/7) + 11.0/10*sin(7*t + 14.0/9) + 2.0/9*sin(9*t + 20.0/13) + 11.0/7*sin(10*t + 89.0/19) + 1.0/8*sin(11*t + 3.0/2) + 40.0/7*sin(17*t + 13.0/8) + 7.0/4*sin(19*t + 13.0/8) + 13.0/8*sin(20*t + 17.0/10) + 1.0/7*sin(22*t + 1.0/7) + 5.0/7*sin(25*t + 11.0/7) + 14.0/13*sin(26*t + 33.0/7) + 7.0/5*sin(27*t + 11.0/7) + 11.0/6*sin(31*t + 17.0/10) + 5.0/8*sin(32*t + 7.0/4) + 6.0/5*sin(35*t + 5.0/3) + 3.0/5*sin(37*t + 23.0/14) + 5.0/13*sin(38*t + 75.0/16) + 4.0/5*sin(42*t + 17.0/10) + 9.0/14*sin(44*t + 12.0/7) + 1.0/9*sin(46*t + 23.0/12) + 1.0/38*sin(47*t + 47.0/10) + 2.0/7*sin(48*t + 16.0/9) + 2.0/13*sin(49*t + 17.0/9) + 1.0/9*sin(51*t + 8.0/7) + 3.0/8*sin(53*t + 19.0/11) + 1.0/3*sin(54*t + 75.0/16) + 452.0/13)*theta(59*PI -t)*theta(t - 55*PI) + (-4.0/7*sin(20.0/13 - 32*t) - 5.0/14*sin(14.0/9 - 30*t) - 3.0/10*sin(17.0/11 - 29*t) - 1.0/10*sin(3.0/2 - 25*t) - 21.0/20*sin(14.0/9 - 19*t) - 27.0/7*sin(14.0/9 - 18*t) - 34.0/13*sin(14.0/9 - 16*t) - 31.0/16*sin(14.0/9 - 14*t) - 33.0/10*sin(14.0/9 - 11*t) - 5.0/13*sin(3.0/2 - 8*t) - 2.0/5*sin(14.0/9 - 2*t) + 113.0/11*sin(t + 11.0/7) + 11.0/10*sin(3*t + 19.0/12) + 3.0/10*sin(4*t + 47.0/10) + 9.0/14*sin(5*t + 23.0/15) + 5.0/6*sin(6*t + 61.0/13) + 12.0/5*sin(7*t + 11.0/7) + 9*sin(9*t + 11.0/7) + 30.0/11*sin(10*t + 19.0/12) + 3.0/7*sin(12*t + 13.0/8) + 3.0/5*sin(13*t + 14.0/9) + 5.0/9*sin(15*t + 11.0/7) + 1.0/6*sin(17*t + 13.0/8) + 9.0/7*sin(20*t + 8.0/5) + 9.0/14*sin(21*t + 11.0/7) + 2.0/9*sin(22*t + 47.0/10) + 1.0/5*sin(23*t + 61.0/13) + 1.0/5*sin(24*t + 8.0/5) + 5.0/6*sin(26*t + 8.0/5) + 1.0/10*sin(27*t + 13.0/9) + 1.0/3*sin(28*t + 19.0/12) + 8.0/15*sin(31*t + 8.0/5) + 12.0/13)*theta(55*PI -t)*theta(t - 51*PI) + (-1.0/5*sin(17.0/11 - 44*t) - 2.0/3*sin(11.0/7 - 26*t) - 1.0/7*sin(20.0/13 - 24*t) - 1.0/6*sin(11.0/7 - 9*t) + 191.0/9*sin(t + 11.0/7) + 17.0/8*sin(2*t + 47.0/10) + 17.0/10*sin(3*t + 11.0/7) + 1.0/52*sin(4*t + 21.0/16) + 3.0/13*sin(5*t + 14.0/9) + 1.0/5*sin(6*t + 37.0/8) + 1.0/76*sin(7*t + 13.0/5) + 5.0/7*sin(8*t + 61.0/13) + 7.0/9*sin(10*t + 47.0/10) + 21.0/22*sin(11*t + 47.0/10) + 9.0/7*sin(12*t + 47.0/10) + 7.0/5*sin(13*t + 47.0/10) + 4.0/3*sin(14*t + 47.0/10) + 20.0/21*sin(15*t + 33.0/7) + 7.0/12*sin(16*t + 47.0/10) + 6.0/11*sin(17*t + 65.0/14) + 3.0/5*sin(18*t + 11.0/7) + 5.0/11*sin(19*t + 37.0/8) + 1.0/16*sin(20*t + 19.0/12) + 2.0/7*sin(21*t + 47.0/10) + 11.0/21*sin(22*t + 14.0/3) + 3.0/7*sin(23*t + 65.0/14) + 5.0/6*sin(25*t + 47.0/10) + 10.0/11*sin(27*t + 33.0/7) + 1.0/13*sin(28*t + 28.0/19) + 4.0/7*sin(29*t + 18.0/11) + 13.0/12*sin(30*t + 11.0/7) + 3.0/4*sin(31*t + 20.0/13) + 3.0/8*sin(32*t + 51.0/11) + 2.0/3*sin(33*t + 79.0/17) + 5.0/9*sin(34*t + 13.0/9) + 5.0/14*sin(35*t + 23.0/15) + 3.0/4*sin(36*t + 23.0/5) + 4.0/7*sin(37*t + 13.0/9) + 1.0/6*sin(38*t + 47.0/10) + 1.0/33*sin(39*t + 17.0/5) + 1.0/20*sin(40*t + 5.0/3) + 1.0/20*sin(41*t + 6.0/5) + 3.0/10*sin(42*t + 14.0/3) + 3.0/11*sin(43*t + 33.0/7) - 118.0/3)*theta(51*PI -t)*theta(t - 47*PI) + (-3.0/13*sin(31.0/21 - 29*t) - 2.0/3*sin(11.0/7 - 23*t) - 55.0/27*sin(20.0/13 - 8*t) - 16.0/7*sin(14.0/9 - 2*t) + 164.0/11*sin(t + 11.0/7) + 5.0/6*sin(3*t + 11.0/7) + 13.0/6*sin(4*t + 17.0/11) + 5.0/12*sin(5*t + 11.0/7) +sin(6*t + 47.0/10) + 2.0/3*sin(7*t + 14.0/3) + 23.0/6*sin(9*t + 14.0/9) + 61.0/12*sin(10*t + 20.0/13) + 33.0/5*sin(11*t + 14.0/9) + 41.0/13*sin(12*t + 17.0/11) + 19.0/5*sin(13*t + 61.0/13) + 14.0/3*sin(14*t + 47.0/10) + 38.0/7*sin(15*t + 14.0/9) + 1.0/6*sin(16*t + 32.0/7) + 73.0/18*sin(17*t + 47.0/10) + 17.0/5*sin(18*t + 19.0/12) + 27.0/8*sin(19*t + 33.0/7) + 8.0/11*sin(20*t + 7.0/4) + 3*sin(21*t + 47.0/10) + 9.0/17*sin(22*t + 12.0/7) + 1.0/2*sin(24*t + 13.0/8) + 1.0/5*sin(25*t + 7.0/5) + 3.0/10*sin(26*t + 33.0/7) + 1.0/8*sin(27*t + 23.0/5) + 7.0/9*sin(28*t + 20.0/13) + 5.0/13*sin(30*t + 38.0/25) + 4.0/13*sin(31*t + 13.0/9) + 12.0/23*sin(32*t + 3.0/2) + 1.0/4*sin(33*t + 47.0/10) + 1.0/18*sin(34*t + 20.0/13) - 437.0/5)*theta(47*PI -t)*theta(t - 43*PI) + (-4.0/11*sin(13.0/9 - 42*t) - 3.0/11*sin(14.0/9 - 39*t) - 1.0/4*sin(14.0/9 - 38*t) - 5.0/11*sin(14.0/9 - 37*t) - 1.0/15*sin(3.0/2 - 33*t) - 1.0/4*sin(13.0/9 - 29*t) - 2.0/7*sin(17.0/12 - 27*t) - 10.0/13*sin(28.0/19 - 25*t) - 86.0/19*sin(14.0/9 - 23*t) - 405.0/29*sin(11.0/7 - 20*t) - 4.0/7*sin(7.0/5 - 16*t) - 8.0/5*sin(14.0/9 - 14*t) - 29.0/30*sin(23.0/15 - 9*t) - 7.0/9*sin(14.0/9 - 7*t) - 7.0/9*sin(11.0/7 - 4*t) - 11.0/9*sin(17.0/11 - 3*t) + 137.0/10*sin(t + 11.0/7) + 13.0/11*sin(2*t + 26.0/17) + 4.0/9*sin(5*t + 37.0/8) + 2.0/3*sin(6*t + 8.0/5) + 14.0/11*sin(8*t + 33.0/7) + 5.0/4*sin(10*t + 47.0/10) + 3.0/13*sin(11*t + 67.0/15) + 9.0/7*sin(12*t + 33.0/7) + 12.0/11*sin(13*t + 47.0/10) + 3.0/4*sin(15*t + 3.0/2) + 43.0/14*sin(17*t + 14.0/9) + 8.0/7*sin(18*t + 89.0/19) + 9.0/7*sin(19*t + 41.0/9) + 65.0/9*sin(21*t + 47.0/10) + 103.0/17*sin(22*t + 13.0/8) + 9.0/5*sin(24*t + 14.0/9) + 20.0/13*sin(26*t + 17.0/11) + 7.0/4*sin(28*t + 11.0/7) + 11.0/9*sin(30*t + 8.0/5) + 1.0/6*sin(31*t + 11.0/9) + 42.0/41*sin(32*t + 14.0/9) + 13.0/25*sin(34*t + 11.0/7) + 5.0/13*sin(35*t + 14.0/3) + 3.0/5*sin(36*t + 28.0/17) + 5.0/9*sin(40*t + 11.0/7) + 2.0/3*sin(41*t + 19.0/12) + 1.0/7*sin(43*t + 33.0/7) + 3.0/7*sin(44*t + 8.0/5) - 3349.0/25)*theta(43*PI -t)*theta(t - 39*PI) + (-1.0/14*sin(14.0/11 - 34*t) - 27.0/28*sin(38.0/25 - 33*t) - 1.0/5*sin(11.0/8 - 32*t) - 1.0/34*sin(1.0/5 - 30*t) - 2.0/9*sin(3.0/2 - 26*t) - 1.0/5*sin(11.0/7 - 24*t) - 6.0/19*sin(3.0/2 - 23*t) - 3.0/8*sin(3.0/2 - 21*t) - 23.0/14*sin(11.0/7 - 20*t) - 55.0/6*sin(14.0/9 - 15*t) - 9.0/2*sin(14.0/9 - 13*t) - 17.0/8*sin(32.0/21 - 12*t) - 19.0/10*sin(14.0/9 - 11*t) - 10.0/19*sin(20.0/13 - 10*t) - 7.0/3*sin(14.0/9 - 8*t) - 31.0/11*sin(14.0/9 - 5*t) + 5.0/2*sin(t + 11.0/7) + 12.0/11*sin(2*t + 47.0/10) + 11.0/7*sin(3*t + 14.0/9) + 2.0/9*sin(4*t + 14.0/3) + 7.0/6*sin(6*t + 19.0/12) + 2.0/5*sin(9*t + 29.0/19) + 10.0/11*sin(14*t + 13.0/9) + 2.0/9*sin(16*t + 6.0/5) + 12.0/7*sin(17*t + 13.0/8) + 27.0/7*sin(18*t + 8.0/5) + 19.0/11*sin(19*t + 8.0/5) + 12.0/7*sin(22*t + 8.0/5) + 24.0/23*sin(25*t + 8.0/5) + 3.0/8*sin(27*t + 14.0/3) + 14.0/11*sin(28*t + 8.0/5) + 5.0/9*sin(29*t + 14.0/3) + 2.0/5*sin(31*t + 13.0/8) + 2.0/11*sin(36*t + 75.0/16) - 619.0/4)*theta(39*PI -t)*theta(t - 35*PI) + (-1.0/10*sin(3.0/2 - 47*t) - 3.0/7*sin(14.0/9 - 45*t) - 5.0/16*sin(14.0/9 - 37*t) - 45.0/44*sin(14.0/9 - 31*t) - 5.0/3*sin(11.0/7 - 29*t) - 40.0/13*sin(11.0/7 - 21*t) - 1.0/11*sin(16.0/11 - 12*t) - 1.0/4*sin(32.0/21 - 7*t) - 22.0/15*sin(14.0/9 - 4*t) - 58.0/19*sin(11.0/7 -t) + 1.0/6*sin(2*t + 11.0/7) + 13.0/11*sin(3*t + 33.0/7) + 4.0/5*sin(5*t + 11.0/7) + 8.0/11*sin(6*t + 11.0/7) + 2.0/9*sin(8*t + 10.0/7) + 1.0/11*sin(9*t + 47.0/10) + 6.0/11*sin(10*t + 14.0/3) + 11.0/13*sin(11*t + 47.0/10) + 7.0/9*sin(13*t + 17.0/11) + 3.0/5*sin(14*t + 14.0/9) + 3.0/5*sin(15*t + 13.0/8) + 7.0/15*sin(16*t + 19.0/12) + 27.0/11*sin(17*t + 11.0/7) + 57.0/13*sin(18*t + 11.0/7) + 83.0/15*sin(19*t + 11.0/7) + 19.0/8*sin(20*t + 11.0/7) + 34.0/9*sin(22*t + 33.0/7) + 10.0/9*sin(23*t + 11.0/7) + 8.0/9*sin(24*t + 23.0/15) + 5.0/9*sin(25*t + 14.0/3) + 21.0/11*sin(26*t + 33.0/7) + 35.0/11*sin(27*t + 11.0/7) + 4.0/7*sin(28*t + 47.0/10) + 19.0/9*sin(30*t + 11.0/7) + 4.0/9*sin(32*t + 8.0/5) + 4.0/7*sin(33*t + 17.0/11) + 1.0/24*sin(34*t + 17.0/12) + 1.0/31*sin(35*t + 60.0/13) + 33.0/32*sin(36*t + 17.0/11) + 5.0/9*sin(38*t + 8.0/5) + 1.0/19*sin(39*t + 7.0/6) + 1.0/11*sin(40*t + 58.0/13) + 1.0/4*sin(41*t + 61.0/13) + 2.0/9*sin(42*t + 14.0/9) + 1.0/20*sin(43*t + 19.0/11) + 4.0/15*sin(44*t + 21.0/13) + 3.0/11*sin(46*t + 8.0/5) + 1.0/27*sin(48*t + 11.0/7) - 1603.0/10)*theta(35*PI -t)*theta(t - 31*PI) + (-1.0/8*sin(11.0/7 - 6*t) + 1520.0/49*sin(t + 11.0/7) + 1.0/53*sin(2*t + 25.0/7) + 47.0/16*sin(3*t + 11.0/7) + 1.0/8*sin(4*t + 33.0/7) + 9.0/10*sin(5*t + 11.0/7) - 193.0/12)*theta(31*PI -t)*theta(t - 27*PI) + (-1.0/31*sin(7.0/6 - 16*t) - 3.0/5*sin(26.0/17 - 14*t) - 35.0/8*sin(11.0/7 - 12*t) - 3.0/7*sin(13.0/9 - 9*t) - 18.0/11*sin(17.0/11 - 6*t) - 177.0/4*sin(11.0/7 - 4*t) + 11.0/10*sin(t + 11.0/7) + 103.0/26*sin(2*t + 14.0/9) + 49.0/12*sin(3*t + 8.0/5) + 17.0/8*sin(5*t + 37.0/8) + 4.0/11*sin(7*t + 23.0/15) + 1.0/16*sin(8*t + 14.0/5) + 3.0/4*sin(10*t + 8.0/5) + 11.0/9*sin(11*t + 8.0/5) + 7.0/13*sin(13*t + 14.0/3) + 2.0/9*sin(15*t + 23.0/14) + 3.0/11*sin(17*t + 51.0/11) + 2.0/11*sin(18*t + 14.0/9) - 317.0/19)*theta(27*PI -t)*theta(t - 23*PI) + (-56.0/13*sin(11.0/7 - 4*t) + 50.0/3*sin(t + 11.0/7) + 13.0/9*sin(2*t + 14.0/9) + 20.0/9*sin(3*t + 11.0/7) + 23.0/6*sin(5*t + 11.0/7) + 23.0/10*sin(6*t + 33.0/7) + 97.0/3)*theta(23*PI -t)*theta(t - 19*PI) + (-1.0/27*sin(16.0/11 - 34*t) - 1.0/34*sin(19.0/15 - 32*t) - 3.0/13*sin(19.0/14 - 29*t) - 1.0/7*sin(35.0/23 - 26*t) - 1.0/6*sin(7.0/5 - 24*t) - 3.0/4*sin(28.0/19 - 21*t) - 1.0/14*sin(16.0/11 - 20*t) - 1.0/35*sin(4.0/11 - 18*t) - 1.0/6*sin(19.0/13 - 17*t) - 41.0/27*sin(3.0/2 - 13*t) - 7.0/12*sin(14.0/9 - 12*t) - 9.0/7*sin(20.0/13 - 10*t) - 2.0/7*sin(6.0/5 - 9*t) - 331.0/30*sin(11.0/7 - 4*t) - 1.0/20*sin(1.0/3 - 2*t) + 487.0/11*sin(t + 11.0/7) + 32.0/13*sin(3*t + 19.0/12) + 21.0/10*sin(5*t + 8.0/5) + 11.0/21*sin(6*t + 8.0/5) + 22.0/5*sin(7*t + 11.0/7) + 59.0/13*sin(8*t + 8.0/5) + 33.0/8*sin(11*t + 21.0/13) + 23.0/17*sin(14*t + 18.0/11) + 5.0/6*sin(15*t + 8.0/5) + 1.0/16*sin(16*t + 5.0/3) + 15.0/11*sin(19*t + 18.0/11) + 5.0/13*sin(22*t + 22.0/13) + 1.0/2*sin(23*t + 18.0/11) + 1.0/7*sin(25*t + 27.0/16) + 1.0/3*sin(27*t + 13.0/8) + 4.0/11*sin(28*t + 22.0/13) + 1.0/20*sin(30*t + 25.0/13) + 2.0/7*sin(31*t + 28.0/17) + 2.0/11*sin(33*t + 18.0/11) - 417.0/16)*theta(19*PI -t)*theta(t - 15*PI) + (-14.0/9*sin(14.0/11 - 12*t) - 5.0/6*sin(8.0/9 - 8*t) - 22.0/15*sin(10.0/9 - 6*t) - 81.0/10*sin(11.0/8 - 4*t) - 273.0/16*sin(3.0/4 - 2*t) + 85.0/7*sin(t + 32.0/9) + 128.0/7*sin(3*t + 3.0/10) + 5.0/8*sin(5*t + 5.0/3) + 10.0/3*sin(7*t + 71.0/36) + 2.0/9*sin(9*t + 45.0/14) + 22.0/13*sin(10*t + 85.0/43) +sin(11*t + 44.0/43) + 242.0/5)*theta(15*PI -t)*theta(t - 11*PI) + (-1.0/41*sin(8.0/9 - 34*t) - 3.0/10*sin(14.0/9 - 20*t) - 1.0/6*sin(5.0/8 - 19*t) - 3.0/7*sin(4.0/3 - 18*t) - 8.0/11*sin(4.0/9 - 10*t) - 57.0/8*sin(15.0/14 - 4*t) - 151.0/7*sin(8.0/7 - 2*t) + 29.0/3*sin(t + 11.0/6) + 269.0/18*sin(3*t + 2.0/9) + 40.0/11*sin(5*t + 22.0/7) + 2.0/3*sin(6*t + 19.0/14) + 17.0/8*sin(7*t + 4.0/5) + 4.0/13*sin(8*t + 19.0/6) + 12.0/7*sin(9*t + 16.0/9) + 5.0/8*sin(11*t + 9.0/7) + 3.0/8*sin(12*t + 29.0/7) + 7.0/11*sin(13*t + 41.0/14) + 8.0/17*sin(14*t + 51.0/13) + 1.0/4*sin(15*t + 7.0/3) + 1.0/3*sin(16*t + 80.0/23) + 1.0/6*sin(17*t + 8.0/5) + 1.0/82*sin(21*t + 12.0/11) + 1.0/8*sin(22*t + 50.0/11) + 2.0/11*sin(23*t + 7.0/8) + 1.0/33*sin(24*t + 65.0/14) + 2.0/9*sin(25*t + 14.0/9) + 1.0/7*sin(26*t + 1) + 2.0/9*sin(27*t + 5.0/7) + 1.0/37*sin(28*t + 3.0/5) + 1.0/26*sin(29*t + 40.0/13) + 1.0/9*sin(30*t + 53.0/15) + 1.0/8*sin(31*t + 17.0/8) + 1.0/8*sin(32*t + 27.0/10) + 1.0/12*sin(33*t + 39.0/14) + 1.0/19*sin(35*t + 1.0/2) - 591.0/8)*theta(11*PI -t)*theta(t - 7*PI) + (-1.0/8*sin(5.0/6 - 6*t) - 4.0/5*sin(14.0/11 - 4*t) - 15.0/7*sin(7.0/5 - 2*t) + 289.0/9*sin(t + 16.0/9) + 20.0/7*sin(3*t + 17.0/9) + 3.0/5*sin(5*t + 31.0/21) + 215.0/4)*theta(7*PI -t)*theta(t - 3*PI) + (-7.0/9*sin(6.0/7 - 7*t) - 1.0/6*sin(7.0/10 - 2*t) + 417.0/11*sin(t + 27.0/14) + 49.0/16*sin(3*t + 33.0/13) + 7.0/6*sin(4*t + 25.0/8) + 8.0/15*sin(5*t + 55.0/13) + 31.0/30*sin(6*t + 32.0/11) + 7.0/12*sin(8*t + 23.0/8) - 1500.0/19)*theta(3*PI -t)*theta(t +PI))*theta(sqrt(sgn(sin(t/2))));
}

float y(float t)
{
  return ((-1.0/3*sin(23.0/15 - 35*t) - 1.0/4*sin(17.0/11 - 33*t) - 11.0/8*sin(17.0/11 - 7*t) + 679.0/34*sin(t + 11.0/7) + 989.0/9*sin(2*t + 11.0/7) + 7.0/6*sin(3*t + 20.0/11) + 259.0/6*sin(4*t + 11.0/7) + 65.0/7*sin(5*t + 47.0/10) + 8.0/9*sin(6*t + 5.0/3) + 31.0/8*sin(8*t + 14.0/3) + 84.0/13*sin(9*t + 14.0/9) + 62.0/21*sin(10*t + 21.0/13) + 8.0/3*sin(11*t + 11.0/7) + 37.0/9*sin(12*t + 11.0/7) + 32.0/13*sin(13*t + 47.0/10) + 23.0/8*sin(14*t + 11.0/7) + 7.0/9*sin(15*t + 33.0/7) + 50.0/17*sin(16*t + 11.0/7) + 22.0/13*sin(17*t + 14.0/9) + 7.0/3*sin(18*t + 8.0/5) + 1.0/7*sin(19*t + 7.0/4) + 4.0/3*sin(20*t + 11.0/7) + 14.0/11*sin(21*t + 14.0/3) + 10.0/7*sin(22*t + 14.0/9) + 1.0/8*sin(23*t + 9.0/2) + 5.0/4*sin(24*t + 11.0/7) + 9.0/13*sin(25*t + 14.0/9) + 3.0/13*sin(26*t + 12.0/7) + 1.0/20*sin(27*t + 22.0/15) + 1.0/4*sin(28*t + 18.0/11) + 2.0/7*sin(29*t + 65.0/14) + 5.0/4*sin(30*t + 14.0/9) + 1.0/9*sin(31*t + 32.0/7) + 15.0/13*sin(32*t + 14.0/9) + 2.0/7*sin(34*t + 13.0/8) + 1.0/3*sin(36*t + 13.0/8) - 6257.0/19)*theta(99*PI -t)*theta(t - 95*PI) + (-1.0/18*sin(3.0/2 - 27*t) - 1.0/9*sin(11.0/7 - 25*t) - 297.0/8*sin(11.0/7 -t) + 1291.0/19*sin(2*t + 11.0/7) + 141.0/11*sin(3*t + 11.0/7) + 29.0/2*sin(4*t + 11.0/7) + 41.0/6*sin(5*t + 33.0/7) + 5.0/3*sin(6*t + 11.0/7) + 17.0/7*sin(7*t + 11.0/7) + 61.0/11*sin(8*t + 11.0/7) + 1.0/8*sin(9*t + 5.0/3) + 2.0/5*sin(10*t + 11.0/7) + 11.0/10*sin(11*t + 89.0/19) + 16.0/11*sin(12*t + 11.0/7) + 26.0/27*sin(13*t + 8.0/5) + 15.0/11*sin(14*t + 11.0/7) + 3.0/7*sin(15*t + 61.0/13) + 3.0/14*sin(16*t + 8.0/5) + 1.0/8*sin(17*t + 33.0/7) + 11.0/12*sin(18*t + 11.0/7) + 3.0/8*sin(19*t + 11.0/7) + 2.0/5*sin(20*t + 8.0/5) + 2.0/5*sin(21*t + 47.0/10) + 3.0/10*sin(22*t + 23.0/14) + 2.0/9*sin(23*t + 8.0/5) + 3.0/7*sin(24*t + 21.0/13) + 1.0/7*sin(26*t + 18.0/11) + 3.0/11*sin(28*t + 8.0/5) + 1.0/8*sin(29*t + 29.0/19) + 1.0/4*sin(30*t + 19.0/12) + 1.0/9*sin(31*t + 75.0/16) + 1.0/9*sin(32*t + 11.0/7) + 1.0/17*sin(33*t + 5.0/3) + 1.0/5*sin(34*t + 14.0/9) + 1.0/9*sin(36*t + 14.0/9) + 1.0/18*sin(37*t + 51.0/11) + 1.0/9*sin(38*t + 17.0/11) - 3049.0/11)*theta(95*PI -t)*theta(t - 91*PI) + (269.0/9*sin(t + 11.0/7) + 25.0/2*sin(2*t + 11.0/7) + 25.0/14*sin(3*t + 14.0/9) + 13.0/8*sin(4*t + 14.0/9) - 1921.0/9)*theta(91*PI -t)*theta(t - 87*PI) + (-1.0/11*sin(16.0/11 - 32*t) - 1.0/7*sin(17.0/11 - 28*t) - 1.0/12*sin(16.0/11 - 27*t) - 1.0/9*sin(14.0/9 - 25*t) - 1.0/18*sin(16.0/11 - 24*t) - 2.0/9*sin(17.0/11 - 17*t) + 44.0/9*sin(t + 11.0/7) + 457.0/8*sin(2*t + 11.0/7) + 6.0/11*sin(3*t + 41.0/9) + 29.0/7*sin(4*t + 11.0/7) + 5.0/4*sin(5*t + 13.0/8) + 17.0/3*sin(6*t + 11.0/7) + 4.0/7*sin(7*t + 61.0/13) + 5.0/12*sin(8*t + 21.0/13) + 1.0/46*sin(9*t + 17.0/8) + 29.0/13*sin(10*t + 19.0/12) + 1.0/6*sin(11*t + 37.0/8) + 1.0/6*sin(12*t + 17.0/11) + 1.0/8*sin(13*t + 59.0/13) + 14.0/15*sin(14*t + 19.0/12) + 1.0/27*sin(15*t + 2) + 2.0/9*sin(16*t + 14.0/9) + 4.0/9*sin(18*t + 8.0/5) + 1.0/8*sin(19*t + 61.0/13) + 1.0/17*sin(20*t + 11.0/7) + 1.0/17*sin(21*t + 23.0/5) + 1.0/3*sin(22*t + 19.0/12) + 1.0/10*sin(23*t + 14.0/3) + 3.0/10*sin(26*t + 8.0/5) + 1.0/7*sin(29*t + 47.0/10) + 2.0/9*sin(30*t + 8.0/5) + 1.0/24*sin(31*t + 14.0/3) - 1600.0/9)*theta(87*PI -t)*theta(t - 83*PI) + (-2.0/9*sin(13.0/9 - 34*t) - 3.0/14*sin(7.0/5 - 26*t) - 1.0/10*sin(37.0/25 - 20*t) - 16.0/17*sin(37.0/25 - 12*t) + 339.0/10*sin(t + 33.0/7) + 119.0/9*sin(2*t + 11.0/7) + 91.0/9*sin(3*t + 14.0/9) + 126.0/13*sin(4*t + 14.0/9) + 32.0/5*sin(5*t + 20.0/13) + 65.0/7*sin(6*t + 11.0/7) + 13*sin(7*t + 47.0/10) + 13.0/5*sin(8*t + 18.0/11) + 43.0/8*sin(9*t + 23.0/15) + 27.0/11*sin(10*t + 3.0/2) + 25.0/8*sin(11*t + 8.0/5) + 52.0/17*sin(13*t + 14.0/9) + 1.0/6*sin(14*t + 24.0/13) + 17.0/7*sin(15*t + 79.0/17) + 40.0/41*sin(16*t + 32.0/7) + 1.0/5*sin(17*t + 28.0/17) + 3.0/8*sin(18*t + 19.0/13) + 11.0/23*sin(19*t + 17.0/11) + 5.0/7*sin(21*t + 26.0/17) + 2.0/7*sin(22*t + 13.0/9) + 40.0/39*sin(23*t + 17.0/11) + 1.0/9*sin(24*t + 3.0/5) + 16.0/17*sin(25*t + 26.0/17) + 3.0/8*sin(27*t + 17.0/11) + 1.0/6*sin(28*t + 59.0/13) + 5.0/7*sin(29*t + 23.0/5) + 9.0/17*sin(30*t + 68.0/15) + 1.0/6*sin(31*t + 104.0/23) + 2.0/11*sin(32*t + 15.0/11) + 1.0/2*sin(33*t + 23.0/15) + 4.0/7*sin(35*t + 35.0/23) + 3.0/11*sin(36*t + 4.0/3) + 1.0/4*sin(37*t + 14.0/9) + 1.0/10*sin(38*t + 68.0/15) + 1.0/20*sin(39*t + 13.0/9) + 2.0/11*sin(40*t + 34.0/23) - 636.0/11)*theta(83*PI -t)*theta(t - 79*PI) + (-1.0/10*sin(11.0/7 - 23*t) - 3.0/14*sin(14.0/9 - 19*t) - 2.0/9*sin(14.0/9 - 17*t) - 1.0/4*sin(14.0/9 - 15*t) - 5.0/14*sin(14.0/9 - 13*t) - 5.0/11*sin(14.0/9 - 11*t) - 7.0/11*sin(11.0/7 - 9*t) - 17.0/3*sin(11.0/7 - 3*t) - 358.0/5*sin(11.0/7 -t) + 45.0/7*sin(2*t + 11.0/7) + 25.0/9*sin(4*t + 11.0/7) + 18.0/11*sin(5*t + 47.0/10) + 9.0/8*sin(6*t + 14.0/9) + 31.0/32*sin(7*t + 47.0/10) + 4.0/7*sin(8*t + 14.0/9) + 3.0/8*sin(10*t + 11.0/7) + 2.0/9*sin(12*t + 8.0/5) + 1.0/8*sin(14*t + 18.0/11) + 1.0/17*sin(16*t + 17.0/11) + 1.0/17*sin(18*t + 3.0/2) + 1.0/25*sin(20*t + 3.0/2) + 1.0/8*sin(21*t + 75.0/16) + 1.0/11*sin(22*t + 8.0/5) + 1.0/23*sin(24*t + 26.0/17) + 1.0/12*sin(25*t + 47.0/10) - 906.0/5)*theta(79*PI -t)*theta(t - 75*PI) + (-1.0/17*sin(13.0/10 - 54*t) - 1.0/10*sin(7.0/6 - 53*t) - 1.0/19*sin(3.0/4 - 50*t) - 1.0/11*sin(5.0/4 - 49*t) - 2.0/13*sin(10.0/7 - 46*t) - 4.0/11*sin(15.0/11 - 44*t) - 1.0/7*sin(11.0/12 - 43*t) - 1.0/3*sin(15.0/11 - 42*t) - 1.0/4*sin(6.0/5 - 41*t) - 1.0/12*sin(9.0/7 - 40*t) - 1.0/5*sin(23.0/17 - 39*t) - 1.0/5*sin(7.0/5 - 38*t) - 6.0/11*sin(7.0/5 - 36*t) - 4.0/11*sin(18.0/13 - 31*t) - 6.0/17*sin(17.0/13 - 30*t) - 6.0/11*sin(4.0/3 - 29*t) - 4.0/11*sin(17.0/12 - 28*t) - 2.0/5*sin(19.0/14 - 27*t) - 2.0/9*sin(3.0/2 - 25*t) - 3.0/5*sin(4.0/3 - 24*t) - 4.0/11*sin(18.0/13 - 23*t) - 7.0/13*sin(22.0/15 - 22*t) - 4.0/5*sin(10.0/7 - 17*t) - 5.0/4*sin(13.0/9 - 16*t) - 7.0/8*sin(4.0/3 - 15*t) - 50.0/9*sin(23.0/15 - 12*t) - 29.0/9*sin(23.0/15 - 10*t) - 218.0/13*sin(17.0/11 - 4*t) - 53.0/6*sin(14.0/9 - 3*t) - 334.0/17*sin(14.0/9 -t) + 373.0/17*sin(2*t + 19.0/12) + 98.0/13*sin(5*t + 13.0/8) + 247.0/11*sin(6*t + 13.0/8) + 40.0/9*sin(7*t + 18.0/11) + 31.0/10*sin(8*t + 13.0/8) + 3.0/2*sin(9*t + 13.0/8) + 19.0/5*sin(11*t + 8.0/5) + 37.0/10*sin(13*t + 8.0/5) + 1.0/3*sin(14*t + 30.0/7) + 1.0/4*sin(18*t + 7.0/4) + 9.0/14*sin(19*t + 8.0/5) + 5.0/16*sin(20*t + 9.0/2) + 7.0/8*sin(21*t + 13.0/8) + 1.0/11*sin(32*t + 31.0/15) + 2.0/9*sin(33*t + 5.0/3) + 2.0/7*sin(34*t + 47.0/10) + 4.0/13*sin(35*t + 8.0/5) + 1.0/28*sin(37*t + 1.0/18) + 1.0/5*sin(45*t + 16.0/9) + 1.0/20*sin(47*t + 17.0/10) + 1.0/9*sin(48*t + 67.0/34) + 1.0/36*sin(51*t + 37.0/9) + 1.0/11*sin(52*t + 13.0/7) - 329.0/13)*theta(75*PI -t)*theta(t - 71*PI) + (-6.0/17*sin(18.0/13 - 46*t) - 6.0/11*sin(17.0/13 - 43*t) - 5.0/8*sin(7.0/6 - 42*t) - 10.0/13*sin(14.0/11 - 41*t) - 1.0/6*sin(9.0/7 - 40*t) - 5.0/9*sin(4.0/3 - 37*t) -sin(9.0/7 - 36*t) - 1.0/3*sin(5.0/4 - 35*t) - 1.0/4*sin(17.0/11 - 30*t) - 34.0/33*sin(4.0/3 - 29*t) - 32.0/21*sin(11.0/8 - 28*t) - 1.0/2*sin(4.0/3 - 27*t) - 79.0/8*sin(3.0/2 - 17*t) - 20.0/11*sin(25.0/17 - 14*t) - 13.0/10*sin(20.0/13 - 11*t) - 10.0/7*sin(3.0/2 - 9*t) - 12.0/7*sin(22.0/15 - 8*t) - 26.0/11*sin(17.0/11 - 7*t) - 541.0/19*sin(11.0/7 -t) + 17.0/13*sin(2*t + 11.0/7) + 31.0/4*sin(3*t + 8.0/5) + 53.0/6*sin(4*t + 8.0/5) + 51.0/19*sin(5*t + 13.0/8) + 12.0/13*sin(6*t + 11.0/7) + 12.0/25*sin(10*t + 11.0/7) + 7.0/9*sin(12*t + 23.0/14) + 23.0/10*sin(13*t + 13.0/8) + 42.0/17*sin(15*t + 33.0/7) + 96.0/13*sin(16*t + 8.0/5) + 2.0/11*sin(18*t + 1.0/96) + 79.0/20*sin(19*t + 19.0/11) + 52.0/11*sin(20*t + 7.0/4) + 49.0/16*sin(21*t + 23.0/13) + 11.0/17*sin(22*t + 35.0/17) + 39.0/19*sin(23*t + 16.0/9) + 26.0/11*sin(24*t + 9.0/5) + 32.0/13*sin(25*t + 16.0/9) + 3.0/5*sin(26*t + 15.0/8) + 13.0/9*sin(31*t + 23.0/13) + 7.0/10*sin(32*t + 11.0/6) + 3.0/10*sin(33*t + 41.0/20) + 5.0/8*sin(34*t + 7.0/4) + 5.0/7*sin(38*t + 20.0/11) + 5.0/7*sin(39*t + 13.0/7) + 5.0/16*sin(44*t + 12.0/7) + 2.0/9*sin(45*t + 13.0/7) + 10.0/19*sin(47*t + 31.0/16) + 17.0/18*sin(48*t + 11.0/6) + 19.0/3)*theta(71*PI -t)*theta(t - 67*PI) + (-1.0/91*sin(6.0/11 - 25*t) - 2.0/7*sin(20.0/13 - 20*t) - 50.0/13*sin(14.0/9 - 13*t) - 1.0/22*sin(7.0/8 - 7*t) - 12.0/7*sin(17.0/11 - 4*t) - 29.0/9*sin(14.0/9 - 3*t) - 1.0/4*sin(17.0/11 - 2*t) + 544.0/15*sin(t + 33.0/7) + 12.0/7*sin(5*t + 47.0/10) + 8.0/11*sin(6*t + 33.0/7) + 5.0/13*sin(8*t + 8.0/5) + 25.0/24*sin(9*t + 47.0/10) + 7.0/12*sin(10*t + 51.0/11) + 8.0/15*sin(11*t + 11.0/7) + 13.0/11*sin(12*t + 26.0/17) + 297.0/74*sin(14*t + 33.0/7) + 57.0/13*sin(15*t + 8.0/5) + 127.0/11*sin(16*t + 19.0/12) + 43.0/10*sin(17*t + 21.0/13) + 17.0/9*sin(18*t + 14.0/3) + 18.0/5*sin(19*t + 11.0/7) + 34.0/23*sin(21*t + 75.0/16) + 18.0/7*sin(22*t + 19.0/12) +sin(23*t + 61.0/13) + 4.0/13*sin(24*t + 13.0/8) + 3.0/8*sin(26*t + 5.0/3) + 3.0/13*sin(27*t + 19.0/12) + 1.0/41*sin(28*t + 23.0/8) + 1.0/2*sin(29*t + 61.0/13) + 7.0/8*sin(30*t + 8.0/5) + 22.0/15*sin(31*t + 8.0/5) + 3.0/8*sin(32*t + 18.0/11) + 1130.0/13)*theta(67*PI -t)*theta(t - 63*PI) + (-3.0/13*sin(37.0/25 - 36*t) - 4.0/13*sin(15.0/11 - 29*t) - 6.0/7*sin(17.0/11 - 25*t) - 10.0/21*sin(19.0/13 - 23*t) - 1.0/7*sin(29.0/19 - 20*t) - 7.0/4*sin(11.0/7 - 18*t) - 14.0/5*sin(20.0/13 - 12*t) - 37.0/15*sin(14.0/9 - 10*t) - 48.0/19*sin(14.0/9 - 7*t) - 5.0/6*sin(11.0/7 - 5*t) - 19.0/12*sin(11.0/7 - 4*t) + 75.0/8*sin(t + 33.0/7) + 13.0/9*sin(2*t + 47.0/10) + 5.0/6*sin(3*t + 8.0/5) + 8.0/7*sin(6*t + 8.0/5) + 92.0/91*sin(8*t + 13.0/8) + 1.0/38*sin(9*t + 33.0/8) + 55.0/13*sin(11*t + 19.0/12) + 20.0/9*sin(13*t + 19.0/12) + 1.0/2*sin(14*t + 23.0/5) + 28.0/11*sin(15*t + 33.0/7) + 7.0/11*sin(16*t + 79.0/17) + 17.0/10*sin(17*t + 8.0/5) + 3.0/5*sin(19*t + 23.0/5) + 7.0/10*sin(21*t + 26.0/17) + 11.0/21*sin(22*t + 11.0/7) + 5.0/6*sin(24*t + 13.0/8) + 1.0/7*sin(26*t + 7.0/4) + 1.0/9*sin(27*t + 13.0/9) + 5.0/9*sin(28*t + 14.0/9) + 3.0/5*sin(30*t + 17.0/11) + 7.0/15*sin(31*t + 13.0/9) + 4.0/13*sin(32*t + 10.0/7) + 1.0/5*sin(33*t + 3.0/2) + 1.0/7*sin(34*t + 60.0/13) + 1.0/4*sin(35*t + 32.0/7) + 1121.0/8)*theta(63*PI -t)*theta(t - 59*PI) + (-3.0/4*sin(11.0/8 - 54*t) - 3.0/7*sin(31.0/21 - 52*t) - 1.0/10*sin(1.0/7 - 51*t) - 4.0/13*sin(13.0/10 - 48*t) - 6.0/7*sin(17.0/12 - 45*t) - 17.0/11*sin(16.0/11 - 43*t) - 2.0/11*sin(9.0/7 - 42*t) - 13.0/11*sin(16.0/11 - 41*t) - 14.0/29*sin(28.0/19 - 39*t) - 3.0/7*sin(35.0/23 - 36*t) - 4.0/5*sin(25.0/17 - 34*t) - 13.0/14*sin(25.0/17 - 32*t) - 2.0/11*sin(11.0/8 - 31*t) - 12.0/11*sin(13.0/9 - 21*t) - 107.0/18*sin(23.0/15 - 18*t) - 49.0/5*sin(35.0/23 - 15*t) - 47.0/7*sin(26.0/17 - 14*t) - 3.0/10*sin(13.0/9 - 12*t) - 29.0/13*sin(14.0/9 - 8*t) - 15.0/7*sin(14.0/9 - 6*t) - 10.0/3*sin(14.0/9 - 3*t) - 7.0/12*sin(23.0/15 - 2*t) - 197.0/18*sin(11.0/7 -t) + 5.0/16*sin(4*t + 13.0/8) + 69.0/68*sin(5*t + 13.0/8) + 19.0/10*sin(7*t + 11.0/7) + 7.0/8*sin(9*t + 14.0/9) + 29.0/12*sin(10*t + 61.0/13) + 1.0/4*sin(11*t + 17.0/11) + 4.0/11*sin(13*t + 77.0/17) + 3.0/10*sin(16*t + 35.0/8) + 208.0/23*sin(17*t + 13.0/8) + 23.0/8*sin(19*t + 8.0/5) + 9.0/10*sin(20*t + 7.0/4) + 23.0/15*sin(22*t + 11.0/7) + 1.0/8*sin(23*t + 38.0/9) + 1.0/8*sin(24*t + 4.0/3) + 5.0/9*sin(25*t + 37.0/25) + 5.0/9*sin(26*t + 23.0/13) + 6.0/7*sin(27*t + 17.0/11) + 5.0/7*sin(28*t + 17.0/10) + 11.0/9*sin(29*t + 5.0/3) + 5.0/14*sin(30*t + 8.0/5) + 12.0/23*sin(33*t + 8.0/5) + 4.0/13*sin(35*t + 16.0/9) + 1.0/8*sin(37*t + 9.0/2) + 1.0/6*sin(38*t + 14.0/3) + 1.0/7*sin(40*t + 17.0/8) + 1.0/29*sin(44*t + 4.0/7) + 14.0/13*sin(46*t + 16.0/9) + 5.0/12*sin(47*t + 9.0/5) + 8.0/11*sin(49*t + 16.0/9) + 4.0/11*sin(50*t + 17.0/10) + 5.0/7*sin(53*t + 17.0/10) + 641.0/4)*theta(59*PI -t)*theta(t - 55*PI) + (-2.0/7*sin(23.0/15 - 32*t) - 7.0/9*sin(17.0/11 - 30*t) - 5.0/9*sin(20.0/13 - 29*t) - 2.0/11*sin(3.0/2 - 27*t) - 1.0/9*sin(26.0/17 - 26*t) - 1.0/74*sin(21.0/20 - 23*t) - 3.0/11*sin(3.0/2 - 21*t) - 5.0/6*sin(20.0/13 - 20*t) - 2.0/11*sin(19.0/13 - 14*t) - 37.0/8*sin(14.0/9 - 11*t) - 11.0/5*sin(14.0/9 - 8*t) - 17.0/8*sin(11.0/7 - 3*t) - 83.0/11*sin(11.0/7 -t) + 3.0/8*sin(2*t + 14.0/9) + 3.0/8*sin(4*t + 33.0/7) + 7.0/5*sin(5*t + 17.0/11) + 26.0/17*sin(6*t + 47.0/10) + 57.0/10*sin(7*t + 11.0/7) + 233.0/13*sin(9*t + 11.0/7) + 44.0/15*sin(10*t + 19.0/12) + 3.0/5*sin(12*t + 14.0/3) + 20.0/21*sin(13*t + 14.0/9) + 12.0/7*sin(15*t + 19.0/12) + 3.0/5*sin(16*t + 8.0/5) + 14.0/9*sin(17*t + 11.0/7) + 21.0/13*sin(18*t + 8.0/5) + 17.0/13*sin(19*t + 19.0/12) + 2.0/9*sin(22*t + 19.0/12) + 1.0/7*sin(24*t + 13.0/8) + 1.0/4*sin(25*t + 47.0/10) + 4.0/9*sin(28*t + 21.0/13) +sin(31*t + 21.0/13) + 1767.0/10)*theta(55*PI -t)*theta(t - 51*PI) + (-7.0/13*sin(32.0/21 - 38*t) - 1.0/15*sin(1.0/21 - 34*t) - 2.0/9*sin(4.0/3 - 26*t) - 1.0/3*sin(11.0/8 - 20*t) - 48.0/7*sin(11.0/7 - 13*t) - 32.0/7*sin(11.0/7 - 12*t) - 18.0/19*sin(11.0/7 - 7*t) - 4.0/11*sin(14.0/9 - 6*t) + 15.0/14*sin(t + 11.0/7) + 15.0/7*sin(2*t + 33.0/7) + 5.0/6*sin(3*t + 14.0/9) + 17.0/16*sin(4*t + 47.0/10) + 30.0/29*sin(5*t + 14.0/3) + 17.0/10*sin(8*t + 47.0/10) + 7.0/6*sin(9*t + 14.0/3) + 7.0/5*sin(10*t + 47.0/10) + 11.0/6*sin(11*t + 14.0/3) + 128.0/17*sin(14*t + 33.0/7) + 39.0/11*sin(15*t + 14.0/3) + 36.0/7*sin(16*t + 17.0/11) + 104.0/15*sin(17*t + 14.0/9) + 59.0/8*sin(18*t + 14.0/3) + 46.0/11*sin(19*t + 23.0/15) + 1.0/9*sin(21*t + 43.0/14) + 1.0/14*sin(22*t + 13.0/10) + 3.0/8*sin(23*t + 37.0/8) + 7.0/9*sin(24*t + 3.0/2) + 5.0/16*sin(25*t + 59.0/13) + 8.0/17*sin(27*t + 65.0/14) + 1.0/7*sin(28*t + 11.0/7) + 1.0/6*sin(29*t + 12.0/7) + 1.0/11*sin(30*t + 16.0/11) + 2.0/5*sin(31*t + 3.0/2) + 11.0/21*sin(32*t + 23.0/5) + 1.0/3*sin(33*t + 23.0/5) + 2.0/9*sin(35*t + 13.0/8) + 4.0/5*sin(36*t + 37.0/8) + 2.0/5*sin(37*t + 19.0/13) + 1.0/32*sin(39*t + 33.0/8) + 3.0/10*sin(40*t + 79.0/17) + 2.0/11*sin(41*t + 28.0/19) + 1.0/11*sin(42*t + 23.0/5) + 5.0/11*sin(43*t + 20.0/13) + 2.0/11*sin(44*t + 23.0/14) + 721.0/4)*theta(51*PI -t)*theta(t - 47*PI) + (-5.0/9*sin(11.0/7 - 33*t) - 9.0/13*sin(14.0/9 - 27*t) - 4.0/11*sin(11.0/7 - 7*t) - 5.0/8*sin(11.0/7 - 6*t) - 4.0/3*sin(11.0/7 - 2*t) + 97.0/11*sin(t + 11.0/7) + 19.0/14*sin(3*t + 11.0/7) + 2.0/5*sin(4*t + 14.0/9) + 11.0/16*sin(5*t + 11.0/7) + 5.0/7*sin(8*t + 47.0/10) + 3.0/4*sin(9*t + 14.0/3) + 11.0/6*sin(10*t + 61.0/13) + 34.0/15*sin(11*t + 61.0/13) + 11.0/9*sin(12*t + 14.0/3) + 4.0/7*sin(13*t + 37.0/8) + 5.0/6*sin(14*t + 65.0/14) + 19.0/20*sin(15*t + 14.0/3) + 1.0/13*sin(16*t + 13.0/8) + 12.0/13*sin(17*t + 17.0/11) + 3.0/4*sin(18*t + 14.0/9) + 9.0/8*sin(19*t + 37.0/8) + 35.0/13*sin(20*t + 65.0/14) + 32.0/11*sin(21*t + 65.0/14) + 113.0/38*sin(22*t + 14.0/3) + 3.0/8*sin(23*t + 9.0/2) + 12.0/23*sin(24*t + 11.0/7) + 1.0/27*sin(25*t + 8.0/7) + 1.0/4*sin(26*t + 37.0/8) + 14.0/9*sin(28*t + 20.0/13) + 13.0/11*sin(29*t + 26.0/17) + 6.0/5*sin(30*t + 14.0/3) + 4.0/7*sin(31*t + 14.0/3) + 10.0/13*sin(32*t + 11.0/7) + 2.0/7*sin(34*t + 20.0/13) + 665.0/4)*theta(47*PI -t)*theta(t - 43*PI) + (-2.0/7*sin(3.0/2 - 44*t) - 28.0/29*sin(20.0/13 - 43*t) - 1.0/29*sin(16.0/17 - 35*t) - 13.0/25*sin(11.0/7 - 33*t) - 1.0/3*sin(11.0/7 - 31*t) - 14.0/15*sin(14.0/9 - 29*t) - 3.0/7*sin(14.0/9 - 27*t) - 7.0/10*sin(17.0/11 - 25*t) - 19.0/6*sin(17.0/11 - 23*t) - 96.0/13*sin(11.0/7 - 20*t) - 14.0/15*sin(29.0/19 - 16*t) - 7.0/9*sin(11.0/7 - 14*t) - 8.0/11*sin(20.0/13 - 9*t) - 3.0/14*sin(17.0/11 - 7*t) - 2.0/3*sin(11.0/7 - 4*t) - 26.0/11*sin(14.0/9 - 2*t) + 326.0/13*sin(t + 11.0/7) + 9.0/11*sin(3*t + 14.0/9) + 1.0/7*sin(5*t + 17.0/10) + 1.0/36*sin(6*t + 47.0/23) +sin(8*t + 33.0/7) + 4.0/5*sin(10*t + 47.0/10) + 3.0/13*sin(11*t + 32.0/7) + 7.0/8*sin(12*t + 33.0/7) + 8.0/11*sin(13*t + 47.0/10) + 5.0/14*sin(15*t + 3.0/2) + 16.0/9*sin(17*t + 14.0/9) + 2.0/7*sin(18*t + 79.0/17) + 2.0/5*sin(19*t + 15.0/8) + 53.0/13*sin(21*t + 47.0/10) + 30.0/7*sin(22*t + 8.0/5) + 9.0/14*sin(24*t + 14.0/9) + 1.0/4*sin(26*t + 31.0/21) + 1.0/7*sin(28*t + 18.0/11) + 1.0/6*sin(30*t + 9.0/5) + 1.0/6*sin(34*t + 11.0/7) + 1.0/10*sin(36*t + 19.0/14) + 1.0/6*sin(37*t + 19.0/13) + 1.0/8*sin(38*t + 5.0/3) + 7.0/8*sin(39*t + 14.0/3) + 9.0/7*sin(40*t + 33.0/7) + 9.0/13*sin(41*t + 14.0/3) + 10.0/11*sin(42*t + 23.0/14) + 1001.0/8)*theta(43*PI -t)*theta(t - 39*PI) + (-7.0/10*sin(3.0/2 - 36*t) - 4.0/9*sin(35.0/23 - 35*t) - 57.0/58*sin(20.0/13 - 30*t) - 1.0/7*sin(11.0/7 - 28*t) - 4.0/7*sin(22.0/15 - 27*t) - 11.0/8*sin(26.0/17 - 26*t) - 5.0/13*sin(3.0/2 - 24*t) - 9.0/8*sin(20.0/13 - 23*t) - 2.0/7*sin(3.0/2 - 21*t) - 51.0/26*sin(14.0/9 - 20*t) - 7.0/9*sin(13.0/9 - 16*t) - 55.0/9*sin(14.0/9 - 15*t) - 24.0/7*sin(14.0/9 - 13*t) - 25.0/19*sin(29.0/19 - 12*t) - 9.0/11*sin(17.0/11 - 11*t) - 19.0/15*sin(14.0/9 - 10*t) - 5.0/9*sin(34.0/23 - 9*t) - 97.0/49*sin(14.0/9 - 8*t) - 1.0/4*sin(26.0/17 - 7*t) - 13.0/10*sin(14.0/9 - 6*t) - 8.0/11*sin(17.0/11 - 5*t) - 25.0/11*sin(11.0/7 - 3*t) + 151.0/11*sin(t + 11.0/7) + 16.0/11*sin(2*t + 11.0/7) + 3.0/11*sin(4*t + 21.0/13) + 17.0/13*sin(14*t + 26.0/17) + 3.0/5*sin(17*t + 13.0/8) + 16.0/7*sin(18*t + 8.0/5) + 6.0/7*sin(19*t + 11.0/7) + 13.0/14*sin(22*t + 19.0/12) + 7.0/10*sin(25*t + 11.0/7) + 1.0/13*sin(29*t + 13.0/10) + 5.0/7*sin(31*t + 8.0/5) + 5.0/16*sin(32*t + 21.0/13) + 1.0/7*sin(33*t + 17.0/10) + 4.0/9*sin(34*t + 8.0/5) + 1434.0/19)*theta(39*PI -t)*theta(t - 35*PI) + (-1.0/20*sin(15.0/11 - 46*t) - 1.0/9*sin(32.0/21 - 41*t) - 3.0/10*sin(28.0/19 - 39*t) - 6.0/13*sin(20.0/13 - 33*t) - 19.0/10*sin(11.0/7 - 31*t) - 5.0/3*sin(11.0/7 - 29*t) - 16.0/7*sin(11.0/7 - 26*t) - 18.0/13*sin(14.0/9 - 21*t) - 7.0/12*sin(17.0/11 - 8*t) - 8.0/7*sin(11.0/7 - 6*t) - 24.0/11*sin(11.0/7 - 4*t) + 189.0/10*sin(t + 11.0/7) + 41.0/11*sin(2*t + 33.0/7) + 42.0/11*sin(3*t + 11.0/7) + 13.0/11*sin(5*t + 11.0/7) + 3.0/7*sin(7*t + 26.0/17) + 9.0/10*sin(9*t + 11.0/7) + 5.0/14*sin(10*t + 61.0/13) + 1.0/22*sin(11*t + 31.0/7) + 1.0/7*sin(12*t + 16.0/11) + 7.0/5*sin(13*t + 14.0/9) + 7.0/10*sin(14*t + 14.0/9) + 4.0/5*sin(15*t + 8.0/5) + 28.0/29*sin(16*t + 11.0/7) + 17.0/8*sin(17*t + 11.0/7) + 19.0/5*sin(18*t + 11.0/7) + 66.0/19*sin(19*t + 11.0/7) + 25.0/11*sin(20*t + 11.0/7) + 19.0/10*sin(22*t + 33.0/7) + 16.0/11*sin(23*t + 11.0/7) + 3.0/14*sin(24*t + 7.0/5) + 3.0/4*sin(25*t + 21.0/13) + 25.0/11*sin(27*t + 11.0/7) + 2.0/5*sin(28*t + 47.0/10) + 19.0/10*sin(30*t + 11.0/7) + 11.0/16*sin(32*t + 8.0/5) + 1.0/5*sin(34*t + 3.0/2) + 9.0/11*sin(35*t + 47.0/10) + 3.0/11*sin(36*t + 25.0/17) + 7.0/6*sin(37*t + 33.0/7) + 3.0/10*sin(38*t + 23.0/14) + 1.0/2*sin(40*t + 13.0/8) + 1.0/99*sin(42*t + 14.0/5) + 3.0/8*sin(43*t + 47.0/10) + 2.0/7*sin(44*t + 8.0/5) + 1.0/13*sin(45*t + 37.0/25) + 2.0/9*sin(47*t + 79.0/17) + 4.0/11*sin(48*t + 8.0/5) + 295.0/9)*theta(35*PI -t)*theta(t - 31*PI) + (-11.0/5*sin(11.0/7 -t) + 37.0/11*sin(2*t + 11.0/7) + 1.0/8*sin(3*t + 8.0/5) + 8.0/5*sin(4*t + 11.0/7) + 2.0/9*sin(5*t + 19.0/12) + 5.0/7*sin(6*t + 11.0/7) - 1294.0/7)*theta(31*PI -t)*theta(t - 27*PI) + (-7.0/10*sin(11.0/7 - 13*t) - 15.0/7*sin(14.0/9 - 5*t) - 106.0/15*sin(11.0/7 - 2*t) + 41.0/11*sin(t + 33.0/7) + 19.0/8*sin(3*t + 11.0/7) + 4.0/3*sin(4*t + 11.0/7) + 41.0/9*sin(6*t + 11.0/7) + 11.0/5*sin(7*t + 14.0/9) + 8.0/9*sin(8*t + 11.0/7) + 5.0/6*sin(9*t + 11.0/7) + 51.0/50*sin(10*t + 14.0/9) + 7.0/9*sin(11*t + 11.0/7) + 9.0/17*sin(12*t + 47.0/10) + 4.0/9*sin(14*t + 11.0/7) + 4.0/11*sin(15*t + 11.0/7) + 1.0/27*sin(16*t + 34.0/23) + 7.0/11*sin(17*t + 11.0/7) + 4.0/7*sin(18*t + 11.0/7) - 907.0/6)*theta(27*PI -t)*theta(t - 23*PI) + (265.0/12*sin(t + 33.0/7) + 303.0/14*sin(2*t + 33.0/7) + 19.0/8*sin(3*t + 19.0/12) + 13.0/9*sin(4*t + 47.0/10) + 3*sin(5*t + 47.0/10) + 1.0/6*sin(6*t + 51.0/11) - 1174.0/11)*theta(23*PI -t)*theta(t - 19*PI) + (-1.0/16*sin(10.0/7 - 34*t) - 1.0/4*sin(32.0/21 - 30*t) - 2.0/9*sin(23.0/15 - 26*t) - 1.0/31*sin(52.0/51 - 25*t) - 3.0/11*sin(34.0/23 - 22*t) - 1.0/6*sin(11.0/7 - 18*t) - 1.0/34*sin(37.0/25 - 16*t) - 5.0/7*sin(14.0/9 - 14*t) - 14.0/9*sin(20.0/13 - 10*t) - 19.0/7*sin(26.0/17 - 7*t) - 30.0/11*sin(26.0/17 - 4*t) + 172.0/7*sin(t + 11.0/7) + 163.0/12*sin(2*t + 11.0/7) + 354.0/13*sin(3*t + 11.0/7) + 73.0/9*sin(5*t + 19.0/12) + 27.0/13*sin(6*t + 33.0/7) + 103.0/34*sin(8*t + 21.0/13) + 41.0/12*sin(9*t + 19.0/12) + 1.0/7*sin(11*t + 7.0/5) + 2.0/7*sin(12*t + 9.0/5) + 4.0/7*sin(13*t + 19.0/12) + 4.0/7*sin(15*t + 11.0/7) + 2.0/7*sin(17*t + 19.0/12) + 2.0/7*sin(19*t + 8.0/5) + 1.0/25*sin(20*t + 20.0/11) + 2.0/9*sin(21*t + 8.0/5) + 1.0/5*sin(23*t + 18.0/11) + 1.0/7*sin(24*t + 16.0/9) + 3.0/13*sin(27*t + 8.0/5) + 1.0/8*sin(28*t + 19.0/11) + 1.0/8*sin(29*t + 17.0/11) + 1.0/29*sin(31*t + 25.0/17) + 1.0/14*sin(32*t + 19.0/10) + 1.0/13*sin(33*t + 11.0/7) - 877.0/10)*theta(19*PI -t)*theta(t - 15*PI) + (-1.0/8*sin(1.0/2 - 11*t) - 12.0/11*sin(7.0/9 - 8*t) + 23.0/8*sin(t + 17.0/13) + 55.0/7*sin(2*t + 13.0/6) + 13.0/3*sin(3*t + 41.0/11) + 24.0/5*sin(4*t + 1.0/4) + 43.0/9*sin(5*t + 6.0/11) + 8.0/7*sin(6*t + 38.0/9) + 14.0/5*sin(7*t + 13.0/11) + 5.0/4*sin(9*t + 19.0/8) + 8.0/15*sin(10*t + 53.0/26) + 5.0/7*sin(12*t + 59.0/15) - 335.0/12)*theta(15*PI -t)*theta(t - 11*PI) + (-1.0/40*sin(17.0/12 - 31*t) - 1.0/28*sin(4.0/5 - 30*t) - 1.0/12*sin(11.0/9 - 27*t) - 1.0/11*sin(14.0/11 - 25*t) - 1.0/13*sin(7.0/6 - 24*t) - 2.0/7*sin(13.0/10 - 15*t) - 4.0/7*sin(5.0/8 - 13*t) - 25.0/9*sin(11.0/10 - 2*t) + 49.0/10*sin(t + 37.0/9) + 43.0/16*sin(3*t + 29.0/9) + 57.0/11*sin(4*t + 30.0/7) + 31.0/11*sin(5*t + 13.0/12) + 35.0/18*sin(6*t + 9.0/17) + 23.0/14*sin(7*t + 26.0/7) + 4.0/3*sin(8*t + 5.0/2) + 5.0/12*sin(9*t + 3.0/11) + 4.0/7*sin(10*t + 12.0/5) + 8.0/17*sin(11*t + 48.0/13) + 1.0/7*sin(12*t + 27.0/10) + 3.0/10*sin(14*t + 18.0/13) + 5.0/9*sin(16*t + 43.0/10) + 1.0/11*sin(17*t + 19.0/8) + 2.0/11*sin(18*t + 14.0/11) + 2.0/9*sin(19*t + 41.0/12) + 1.0/13*sin(20*t + 25.0/11) + 1.0/8*sin(21*t + 1.0/27) + 1.0/10*sin(22*t + 4.0/11) + 1.0/9*sin(23*t + 44.0/13) + 1.0/15*sin(26*t + 37.0/19) + 1.0/17*sin(28*t + 46.0/11) + 1.0/14*sin(29*t + 11.0/21) + 1.0/18*sin(32*t + 23.0/6) + 1.0/12*sin(33*t + 1.0/15) + 1.0/13*sin(34*t + 14.0/5) + 1.0/34*sin(35*t + 5.0/7) - 101.0/6)*theta(11*PI -t)*theta(t - 7*PI) + (-8.0/7*sin(7.0/5 - 5*t) - 7.0/6*sin(11.0/10 - 4*t) - 25.0/11*sin(31.0/21 - 3*t) + 161.0/17*sin(t + 89.0/22) + 40.0/17*sin(2*t + 43.0/10) + 1.0/6*sin(6*t + 49.0/11) - 103.0/11)*theta(7*PI -t)*theta(t - 3*PI) + (-5.0/6*sin(3.0/7 - 7*t) - 11.0/12*sin(6.0/7 - 5*t) - 13.0/9*sin(4.0/3 - 3*t) - 31.0/12*sin(2.0/3 - 2*t) + 51.0/10*sin(t + 37.0/11) + 1.0/9*sin(4*t + 49.0/25) + 1.0/7*sin(6*t + 11.0/4) + 1.0/6*sin(8*t + 23.0/8) + 3.0/14)*theta(3*PI -t)*theta(t +PI))*theta(sqrt(sgn(sin(t/2))));
}
